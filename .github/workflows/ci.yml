name: Deploy AKS Cluster

on:
  push:
    branches:
      - main  # Trigger the pipeline on pushes to the main branch

jobs:
  terraform:
    runs-on: ubuntu-latest  # Use an Ubuntu environment for the pipeline

    steps:
      # 1. Checkout the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Install Azure CLI manually
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version  # Verify Azure CLI installation

      # 3. Login to Azure using service principal credentials
      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 4. Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # 5. Apply Terraform configuration to provision infrastructure
      - name: Terraform Apply
        run: terraform apply -auto-approve

  build:
    runs-on: ubuntu-latest  # Use an Ubuntu environment for the pipeline
    needs: terraform  # This ensures the 'build' job waits for 'terraform' to finish

    steps:
      # 1. Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "22.3.0"

      # 3. Install dependencies
      - name: Install dependencies
        run: npm install

      # 4. Build Docker image with version based on GITHUB_RUN_NUMBER
      - name: Build Docker image
        run: |
          docker build -t sofienazzabi/nodejs-app:${GITHUB_RUN_NUMBER} .

      # 5. Log in to Docker Hub
      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      # 6. Tag Docker image with version number
      - name: Tag Docker image with auto-increment version
        run: |
          IMAGE_VERSION="${GITHUB_RUN_NUMBER}"
          docker tag sofienazzabi/nodejs-app:${GITHUB_RUN_NUMBER} sofienazzabi/nodejs-app:${IMAGE_VERSION}

      # 7. Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push sofienazzabi/nodejs-app:${GITHUB_RUN_NUMBER}

      # 8. Get Kubeconfig to access AKS cluster
      - name: Get Kubeconfig
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --admin

      # 9. Apply Kubernetes deployment YAML with the updated image
      - name: Deploy to AKS with updated image
        run: |
          kubectl set image deployment/nodejs-app nodejs-app=sofienazzabi/nodejs-app:${GITHUB_RUN_NUMBER}
          kubectl apply -f k8s-deployment.yml

      # 10. Destroy Terraform resources (commented out)
      # - name: Destroy Terraform resources
      #   run: |
      #     terraform destroy -auto-approve
